jz_books <- books %>%
filter(str_detect(Title, regex("j|z", ignore_case = TRUE)))
mean_rating_jz <- mean(jz_books$Rating, na.rm = TRUE)
jz_books
mean_rating_jz
jz_books <- books %>%
filter(str_detect(Title, regex("j|z", ignore_case = TRUE)))
mean_rating_jz <- mean(jz_books$averageRating, na.rm = TRUE)
jz_books
mean_rating_jz
jz_books <- books %>%
filter(str_detect(Title, regex("j|z", ignore_case = TRUE)))
mean_rating_jz <- mean(jz_books$averageRating)
jz_books
mean_rating_jz
jz_books <- books %>%
filter(str_detect(Title, regex("j|z|J|Z")))
mean_rating_jz <- mean(jz_books$averageRating)
jz_books
mean_rating_jz
?str_detect
web_scaped <- read_html("https://www.goodreads.com/list/show/1360.Best_Banned_Censored_and_Challenged_Books")
title <- html_text(html_elements(web_scaped, ".bookTitle span"))
author <- html_text(html_elements(web_scaped, ".authorName span")) %>%
str_squish()
averageRating <- html_text(html_elements(web_scaped, ".minirating")) %>%
str_extract("[0-9]\\.[0-9]+") %>%
as.numeric()
books <- tibble(Title = title, Author = author, AverageRating = averageRating)
print(books, n = 10)
lastName <- ifelse(
is.na(word(author, 2)),
word(author, -1),
word(author, 2)
)
books <- tibble(Title = title, Author = author, averageRating = averageRating, LastName = lastName)
shortest_last_name <- books %>%
filter(nchar(lastName) == min(nchar(lastName))) %>%
select(Title, Author)
shortest_last_name
jz_books <- books %>%
filter(str_detect(Title, regex("j|z|J|Z")))
mean_rating_jz <- mean(jz_books$averageRating)
jz_books
mean_rating_jz
web_scaped <- read_html("https://www.goodreads.com/list/show/1360.Best_Banned_Censored_and_Challenged_Books")
title <- html_text(html_elements(web_scaped, ".bookTitle span"))
author <- html_text(html_elements(web_scaped, ".authorName span")) %>%
str_squish()
averageRating <- html_text(html_elements(web_scaped, ".minirating")) %>%
str_extract("[0-9]\\.[0-9]+") %>%
as.numeric()
books <- tibble(Title = title, Author = author, AverageRating = averageRating)
print(books, n = 10)
# Calculate number of words in each title
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
?str_count
# Calculate number of words in each title
books <- books %>%
mutate(Word_Count = str_count(Title))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
# Calculate number of words in each title
books <- books %>%
mutate(WordCount = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
books <- books %>%
mutate(WordCount = str_count(Title, "\\S+"))
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
# Calculate number of words in each title
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1) +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency")
summary(books$Word_Count)
lastName <- ifelse(
is.na(word(author, 2)),
word(author, -1),
word(author, 2)
)
books <- tibble(Title = title, Author = author, averageRating = averageRating, LastName = lastName)
shortest_last_name <- books %>%
filter(nchar(lastName) == min(nchar(lastName))) %>%
select(Title, Author)
shortest_last_name
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency")
summary(books$Word_Count)
#Randomly sample from a vector:
x <- c(4,6,9,10,15,20)
sample(x,1)
#Sample with replacement:
sample(x,5,replace=TRUE)
?runif
#Pull 10 random numbers from a Uniform(0,100) distribution:
runif(10,0,100)
#Pull 10 random numbers from a Uniform(0,100) distribution:
runif(10,0,100)
#Pull 10 random numbers from a Uniform(0,100) distribution:
runif(10,0,100)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#For reproducable results:
set.seed(56)
rnorm(10,0,1)
#For reproducable results:
set.seed(56)
rnorm(10,0,1)
#For reproducable results:
set.seed(56)
rnorm(10,0,1)
?rnorm
#Group Practice A:
rnorm(100,100,15)
#Group Practice A:
rnorm(100,100,15)
#Group Practice A:
rnorm(100,100,15)
#Group Practice A:
rnorm(100,100,15)
#Create empty vector to store outcomes:
myrolls <- numeric(0)
#"Roll" a 6-sided die 5,000 times:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
}
#Plot results:
library(ggplot2)
mydata <- data.frame(myrolls)
ggplot(mydata) + geom_histogram(aes(x=myrolls))
View(mydata)
#Create empty vector to store outcomes:
myrolls <- numeric(0)
#"Roll" a 6-sided die 5,000 times:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
}
#Plot results:
library(ggplot2)
mydata <- data.frame(myrolls)
ggplot(mydata) + geom_histogram(aes(x=myrolls))
#Create empty vector to store outcomes:
myrolls <- numeric(0)
#"Roll" a 6-sided die 5,000 times:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
}
#Plot results:
library(ggplot2)
mydata <- data.frame(myrolls)
ggplot(mydata) + geom_histogram(aes(x=myrolls))
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Group Practice C
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)+sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Define door options:
doors <- c(1,2,3)
#Create empty vectors to store outcomes:
always.stay <- c()
always.switch <- c()
#Simulate probabilities of "staying" and "switching":
for (i in 1:1000){
door.car <- sample(doors, 1)
door.choose <- sample(doors, 1)
always.stay[i] <- (door.choose == door.car)
remaining.doors <- setdiff(doors, union(door.car, door.choose))
if (length(remaining.doors) == 1){
shown.door <- remaining.doors
}
else shown.door <- sample(remaining.doors, 1)
door.switch <- setdiff(doors, union(door.choose, shown.door))
always.switch[i] <- (door.switch == door.car)
}
?setdiff
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringr)
web_scaped <- read_html("https://jobs.apple.com/app/en-us/profile/roles")
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
View(web_scaped)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringr)
web_scaped <- read_html("https://www.goodreads.com/list/show/1360.Best_Banned_Censored_and_Challenged_Books")
title <- html_text(html_elements(web_scaped, ".bookTitle span"))
author <- html_text(html_elements(web_scaped, ".authorName span")) %>%
str_squish()
averageRating <- html_text(html_elements(web_scaped, ".minirating")) %>%
str_extract("[0-9]\\.[0-9]+") %>%
as.numeric()
books <- tibble(Title = title, Author = author, AverageRating = averageRating)
print(books, n = 10)
View(web_scaped)
View(web_scaped)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringr)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
web_scaped <- read_html("https://www.goodreads.com/list/show/1360.Best_Banned_Censored_and_Challenged_Books")
title <- html_text(html_elements(web_scaped, ".bookTitle span"))
author <- html_text(html_elements(web_scaped, ".authorName span")) %>%
str_squish()
averageRating <- html_text(html_elements(web_scaped, ".minirating")) %>%
str_extract("[0-9]\\.[0-9]+") %>%
as.numeric()
books <- tibble(Title = title, Author = author, AverageRating = averageRating)
print(books, n = 10)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
location <- html_text(html_elements(web_scaped, ".profile-jobs-item__city div"))
table <- tibble(Title = title, Loco = location)
View(table)
View(table)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple2.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
location <- html_text(html_elements(web_scaped, ".profile-jobs-item__city div"))
table <- tibble(Title = title, Loco = location)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple3.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
location <- html_text(html_elements(web_scaped, ".profile-jobs-item__city div"))
table <- tibble(Title = title, Loco = location)
setwd("~/Downloads/webste/dpsbot/SDS_313/SDS 315/Homework 2")
library(ggplot2)
library(dplyr)
library(kable)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(knitr)
library(lubridate)
profs <- read.csv("profs.csv")
profs <- profs %>%
mutate(
native = factor(native, levels = c(0, 1), labels = c("Non-Native", "Native")),
gender = factor(gender, levels = c(0, 1), labels = c("Male", "Female"))
)
# A
plot_a <- ggplot(profs, aes(x = eval)) +
geom_histogram(bins = 15, color = "black", alpha = 0.8) +
labs(
title = "Distribution of Course Evaluation Scores",
x = "Evaluation Score",
y = "Frequency"
) +
theme_minimal()
# B
plot_b <- ggplot(profs, aes(x = native, y = eval, fill = native)) +
geom_boxplot() +
labs(
title = "Course Evaluation Scores by Native English Speaker Status",
x = "Native English Speaker",
y = "Evaluation Score"
) +
scale_fill_brewer(palette = "Set2") +
theme_minimal() +
theme(legend.position = "none")
# C
plot_c <- ggplot(profs, aes(x = eval)) +
geom_histogram(bins = 15, color = "black", alpha = 0.8) +
facet_grid(rows = vars(gender)) +
labs(
title = "Distribution of Evaluation Scores by Gender",
x = "Evaluation Score",
y = "Frequency"
) +
theme_minimal()
# D
plot_d <- ggplot(profs, aes(x = beauty, y = eval)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Association Between Professor Attractiveness and Course Evaluations",
x = "Attractiveness Score (Mean-Centered)",
y = "Evaluation Score"
)
billboard <- read.csv("billboard.csv")
# A
top_songs <- billboard %>%
group_by(performer, song) %>%
summarize(count = n(), .groups = "drop") %>%
arrange(desc(count)) %>%
head(10) %>%
select(performer, song, count)
# B
diversity_trend <- billboard %>%
filter(!year %in% c(1958, 2021)) %>%
group_by(year) %>%
summarize(
unique_songs = n_distinct(paste(song, performer))  # Handle song/artist combos
)
# C
ten_week_artists <- billboard %>%
group_by(performer, song) %>%
summarize(weeks = n(), .groups = "drop") %>%
filter(weeks >= 10) %>%
group_by(performer) %>%
summarize(hits = n()) %>%
filter(hits >= 30) %>%
arrange(desc(hits))
kable(top_songs, caption = "Top 10 Longest-Running Billboard Hits (1958-2021)") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(knitr)
library(lubridate)
library(kableExtra)
profs <- read.csv("profs.csv")
profs <- profs %>%
mutate(
native = factor(native, levels = c(0, 1), labels = c("Non-Native", "Native")),
gender = factor(gender, levels = c(0, 1), labels = c("Male", "Female"))
)
# A
plot_a <- ggplot(profs, aes(x = eval)) +
geom_histogram(bins = 15, color = "black", alpha = 0.8) +
labs(
title = "Distribution of Course Evaluation Scores",
x = "Evaluation Score",
y = "Frequency"
) +
theme_minimal()
# B
plot_b <- ggplot(profs, aes(x = native, y = eval, fill = native)) +
geom_boxplot() +
labs(
title = "Course Evaluation Scores by Native English Speaker Status",
x = "Native English Speaker",
y = "Evaluation Score"
) +
scale_fill_brewer(palette = "Set2") +
theme_minimal() +
theme(legend.position = "none")
# C
plot_c <- ggplot(profs, aes(x = eval)) +
geom_histogram(bins = 15, color = "black", alpha = 0.8) +
facet_grid(rows = vars(gender)) +
labs(
title = "Distribution of Evaluation Scores by Gender",
x = "Evaluation Score",
y = "Frequency"
) +
theme_minimal()
# D
plot_d <- ggplot(profs, aes(x = beauty, y = eval)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Association Between Professor Attractiveness and Course Evaluations",
x = "Attractiveness Score (Mean-Centered)",
y = "Evaluation Score"
)
kable(top_songs, caption = "Top 10 Longest-Running Billboard Hits (1958-2021)") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
ggplot(diversity_trend, aes(x = year, y = unique_songs)) +
geom_line( size = 1) +
labs(title = "Musical Diversity in Billboard Top 100 (1959-2020)",
x = "Year",
y = "Number of Unique Songs",
caption = "Musical diversity shows three distinct eras:
1) Steady growth (1959-1970s) with expanding music industry,
2) Decline (1980s-1990s) with label consolidation,
3) Digital era resurgence (2000s+) from streaming diversity") +
scale_x_continuous(breaks = seq(1960, 2020, 10))
ggplot(ten_week_artists, aes(x = reorder(performer, hits), y = hits)) +
geom_col(width = 0.8) +
coord_flip() +
labs(title = "Most Prolific Hitmakers (30+ Ten-Week Hits)",
x = "Artist",
y = "Number of Ten-Week Hits",
caption = "Elton John leads with career-spanning success. Modern artists like
Drake (not shown) would likely appear with complete 2021 data.") +
theme(panel.grid.major.y = element_blank())
ggplot(diversity_trend, aes(x = year, y = unique_songs)) +
geom_line(linewidth = 1) +
labs(title = "Musical Diversity in Billboard Top 100 (1959-2020)",
x = "Year",
y = "Number of Unique Songs",
caption = "Musical diversity shows three distinct eras:
1) Steady growth (1959-1970s) with expanding music industry,
2) Decline (1980s-1990s) with label consolidation,
3) Digital era resurgence (2000s+) from streaming diversity") +
scale_x_continuous(breaks = seq(1960, 2020, 10))
kable(top_songs, caption = "Top 10 Longest-Running Billboard Hits (1958-2021)") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
kable(top_songs, caption = "Top 10 Longest-Running Billboard Hits (1958-2021)") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
